{"version":3,"sources":["fonts/Quicksand/static/Quicksand-Regular.ttf","components/Field.js","components/Display.js","components/StatusBar.js","components/Header.js","hooks/useGameEngine.js","hooks/useKeyPress.js","hooks/useGame.js","components/InfoBox.js","App.js","index.js"],"names":["Field","entity","size","fieldStyle","width","height","left","x","top","y","classes","type","className","style","Display","gameSize","entities","fieldSize","displayStyle","map","drawFields","StatusBar","message","snakeLength","bottom","Header","useGameEngine","gameSpeed","gameUpdate","useState","running","setRunning","loopNum","setLoopNum","useEffect","setTimeout","switchPlayStop","useKeyPress","code","pressEvent","setPressEvent","pressedKeys","useRef","handleKeyDown","event","preventDefault","current","includes","push","handleKeyUp","index","indexOf","splice","window","addEventListener","removeEventListener","useGame","gameCount","setGameCount","pending","snakeInitState","snake","snakeDirection","food","setEntities","gameOver","length","gameStatus","setGameStatus","addFood","emptyFields","snakeFields","forEach","segment","field","randomField","Math","floor","random","split","newFood","parseInt","borderCrossed","checkBorders","biteItself","snakeCopy","head","shift","checkSnakeBody","updateSnakeDirection","newDirection","updateGame","newHead","updateSnake","updatedSnake","unshift","tail","pop","moveSnake","gameRestart","InfoBox","App","setMessage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c47b661a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Quicksand-Regular.109d09e5.ttf\";","const Field = ({entity, size}) => {\r\n  const fieldLeft = entity.x * size;\r\n  const fieldTop = entity.y * size;\r\n\r\n  const fieldStyle = {\r\n    width: size,\r\n    height: size,\r\n    left: fieldLeft,\r\n    top: fieldTop\r\n  }\r\n\r\n\r\n\r\n  let classes = `fieldContent ${entity.type}`\r\n  \r\n  return(\r\n    <div className=\"field\" style={fieldStyle}>\r\n      <div className={classes}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Field;","import Field from \"./Field\";\r\n\r\nconst Display = ({gameSize, entities}) => {\r\n  const displaySize = 500;\r\n  const fieldSize = displaySize / gameSize;\r\n\r\n  const drawFields = (entities) => {\r\n    return entities.map((entity) => <Field entity={entity} size={fieldSize} /> )\r\n  }\r\n  \r\n  const displayStyle = {\r\n    width: displaySize,\r\n    height: displaySize,\r\n  }\r\n  \r\n  return (\r\n    <div className=\"displayFrame\">\r\n      <div className=\"display\" style={displayStyle}>\r\n        {drawFields(entities)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Display;","const StatusBar = ({message, snakeLength}) => {\r\n  return (\r\n    <div className=\"statusBar neonText\">\r\n      <div className=\"messageBox\">\r\n        <div className=\"biggerText\">{message.top}</div>\r\n        <div>{message.bottom}</div>\r\n      </div>\r\n      <div>SNAKE LENGTH: {snakeLength}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatusBar;","const Header = () => {\r\n  return(\r\n    <div className=\"header neonText\">\r\n      Neon Snake\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import { useEffect, useState } from \"react\";\r\n\r\nconst useGameEngine = (gameSpeed, gameUpdate) => {\r\n  const [running, setRunning] = useState(false);\r\n  const [loopNum, setLoopNum] = useState(0);\r\n\r\n  const switchPlayStop = () => {\r\n    setRunning(!running)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(running){\r\n      gameUpdate()\r\n      setTimeout(() => {setLoopNum(loopNum + 1)}, gameSpeed)\r\n    }\r\n  },[running, loopNum])\r\n\r\n  return {switchPlayStop, running}\r\n}\r\n\r\nexport default useGameEngine;","import { useEffect, useState, useRef } from \"react\";\r\n\r\nconst useKeyPress = () => {\r\n  const [pressEvent, setPressEvent] = useState({code:''});\r\n  const pressedKeys = useRef([])\r\n\r\n  const handleKeyDown = (event) => {\r\n    event.preventDefault();\r\n    if(!pressedKeys.current.includes(event.code)){\r\n      pressedKeys.current.push(event.code);\r\n      setPressEvent(event);\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    event.preventDefault();\r\n    const index = pressedKeys.current.indexOf(event.code);\r\n    if (index > -1) {\r\n      pressedKeys.current.splice(index, 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keyup', handleKeyUp);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [pressEvent]);\r\n\r\n  return pressEvent\r\n}\r\n\r\nexport default useKeyPress;","import { useEffect, useState, useRef } from \"react\"\r\n\r\nconst useGame = (gameSize) => {\r\n  const [gameCount, setGameCount] = useState(0);\r\n  const pending = useRef(true);\r\n  const snakeInitState = [\r\n    {x: 2, y: 0, type: 'snakeEmpty'},\r\n    {x: 1, y: 0, type: 'snakeEmpty'},\r\n    {x: 0, y: 0, type: 'snakeEmpty'},\r\n  ]\r\n  const snake = useRef(snakeInitState);\r\n  const snakeDirection = useRef('RIGHT');\r\n  const food = useRef(null);\r\n  const [entities, setEntities] = useState([...snake.current])\r\n  const [gameStatus, setGameStatus] = useState({gameOver: false, snakeLength: snake.current.length})\r\n  \r\n  //Stops the game\r\n  const gameOver = () => {\r\n    pending.current = false;\r\n  }\r\n  // Restarts the game\r\n  const gameRestart = () => {\r\n    food.current = null;\r\n    snake.current = snakeInitState;\r\n    snakeDirection.current = 'RIGHT';\r\n    pending.current = true;\r\n    setEntities([...snake.current])\r\n    setGameStatus({gameOver: false, snakeLength: snake.current.length})\r\n  }\r\n\r\n  \r\n  // const [snakeDirection, setSnakeDirection] = useState('RIGHT');\r\n  //Checking if new direction is allowed and assigning new value\r\n  const updateSnakeDirection = (newDirection) => {\r\n    if(newDirection === 'RIGHT' && snake.current[0]['x'] >= snake.current[1]['x']) snakeDirection.current = newDirection;\r\n    if(newDirection === 'LEFT' && snake.current[0]['x'] <= snake.current[1]['x']) snakeDirection.current = newDirection;\r\n    if(newDirection === 'DOWN' && snake.current[0]['y'] >= snake.current[1]['y']) snakeDirection.current = newDirection;\r\n    if(newDirection === 'UP' && snake.current[0]['y'] <= snake.current[1]['y']) snakeDirection.current = newDirection;\r\n  }\r\n  //Moving snake in current direction, growing snake\r\n  const moveSnake = () => {\r\n    const head = snake.current[0]\r\n    let newHead\r\n    const updateSnake = (newHead) => {\r\n      const updatedSnake = [...snake.current];\r\n      updatedSnake.unshift(newHead);\r\n      let tail = updatedSnake.pop();\r\n      if(tail.type === 'snakeFull'){\r\n        tail.type = 'snakeEmpty';\r\n        updatedSnake.push(tail);\r\n      }\r\n      snake.current = updatedSnake;\r\n    }\r\n    switch (snakeDirection.current) {\r\n      case 'RIGHT':\r\n        newHead = {...head, type: 'snakeEmpty'}\r\n        newHead.x++\r\n        updateSnake(newHead)\r\n        break;\r\n      case 'LEFT':\r\n        newHead = {...head, type: 'snakeEmpty'}\r\n        newHead.x--\r\n        updateSnake(newHead)\r\n        break;\r\n      case 'UP':\r\n        newHead = {...head, type: 'snakeEmpty'}\r\n        newHead.y--\r\n        updateSnake(newHead)\r\n        break;\r\n      case 'DOWN':\r\n        newHead = {...head, type: 'snakeEmpty'}\r\n        newHead.y++\r\n        updateSnake(newHead)\r\n        break;     \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  //Returns true if border was crossed\r\n  const checkBorders = () => {\r\n    let borderCrossed = false;\r\n    if(\r\n      snake.current[0]['x'] < 0 \r\n      || snake.current[0]['x'] > gameSize - 1\r\n      || snake.current[0]['y'] < 0 \r\n      ||snake.current[0]['y'] > gameSize - 1\r\n    ){\r\n      borderCrossed = true;\r\n    }\r\n    return borderCrossed;\r\n  }\r\n  //Returns true if snake bite itself\r\n  const checkSnakeBody = () => {\r\n    let biteItself = false;\r\n    const snakeCopy = [...snake.current];\r\n    const head = snakeCopy.shift();\r\n    snakeCopy.forEach((segment) => {\r\n      if(segment.x === head.x && segment.y === head.y){\r\n        biteItself = true;\r\n      }\r\n    })\r\n    return biteItself;\r\n  }\r\n\r\n  //Creates food in random empty field\r\n  const addFood = () => {\r\n    let emptyFields = [];\r\n    let snakeFields = [];\r\n    snake.current.forEach((segment) => {\r\n      snakeFields.push(`${segment.x}:${segment.y}`);\r\n    })\r\n    for(let x = 0; x < gameSize; x++){\r\n      for (let y = 0; y < gameSize; y++){\r\n        let field = `${x}:${y}`\r\n        if(!snakeFields.includes(field)){\r\n          emptyFields.push(field)\r\n        } \r\n      }\r\n    }\r\n    let randomField = emptyFields[Math.floor(Math.random()*emptyFields.length)];\r\n    randomField = randomField.split(':');\r\n    let newFood = {x: parseInt(randomField[0]), y: parseInt(randomField[1]), type: 'food'};\r\n    food.current = newFood;\r\n  }\r\n  //Creates new food if there is no or has been eaten\r\n  const checkFood = () => {\r\n    if(!food.current){\r\n      addFood();\r\n    }\r\n    if(snake.current[0]['x'] === food.current['x'] && snake.current[0]['y'] === food.current['y']){\r\n      addFood();\r\n      snake.current[0]['type'] = 'snakeFull';\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    //Checking lose conditions\r\n    if(checkBorders() || checkSnakeBody()){\r\n      gameOver()\r\n      setGameStatus({...gameStatus, gameOver: true})\r\n    } \r\n    else{\r\n      checkFood();\r\n      setEntities([...snake.current, food.current]);\r\n      setGameStatus({...gameStatus, snakeLength: snake.current.length})\r\n    }\r\n  },[gameCount])\r\n\r\n  const updateGame = () => {\r\n    if(pending.current){\r\n      moveSnake()\r\n      setGameCount(gameCount + 1)\r\n    }\r\n  }\r\n\r\n  \r\n  return {updateSnakeDirection, entities, updateGame, gameRestart, gameStatus}\r\n}\r\n\r\nexport default useGame;","const InfoBox = () => {\r\n  return(\r\n    <div className=\"infoBox neonText\">\r\n      <div>HOW TO PLAY:</div>\r\n      <div>ARROW KEYS - moving the snake</div>\r\n      <div>SPACEBAR - play/pause</div>\r\n      <div>ENTER - restart game after lose</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoBox;","import { useEffect, useState } from \"react\";\r\nimport Display from \"./components/Display\";\r\nimport StatusBar from \"./components/StatusBar\";\r\nimport Header from \"./components/Header\";\r\nimport useGameEngine from \"./hooks/useGameEngine\";\r\nimport useKeyPress from \"./hooks/useKeyPress\";\r\nimport useGame from \"./hooks/useGame\";\r\nimport InfoBox from \"./components/InfoBox\";\r\n\r\nconst App = () => {\r\n  const gameSize = 25;\r\n  const gameSpeed = 125;\r\n\r\n  const pressEvent = useKeyPress()\r\n  const {updateSnakeDirection, entities, updateGame, gameRestart, gameStatus} = useGame(gameSize)\r\n  const {switchPlayStop, running} = useGameEngine(gameSpeed, updateGame)\r\n\r\n\r\n  const [message, setMessage] = useState({top: '', bottom: ''})\r\n  useEffect(() => {\r\n    if(gameStatus.gameOver){\r\n      setMessage({top: 'GAME-OVER', bottom: 'press enter to restart' })\r\n    }\r\n    else if(!running){\r\n      setMessage({top: 'PAUSED', bottom: 'press space to play' })\r\n    }\r\n    else{\r\n      setMessage({top: '', bottom: ''})\r\n    }\r\n  },[running, gameStatus])\r\n\r\n  \r\n  const enterPressHandler = () => {\r\n    if(gameStatus.gameOver){\r\n      gameRestart();\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    switch (pressEvent.code) {\r\n      case 'ArrowRight':\r\n        updateSnakeDirection('RIGHT')\r\n        break;\r\n      case 'ArrowLeft':\r\n        updateSnakeDirection('LEFT')\r\n        break;\r\n      case 'ArrowUp':\r\n        updateSnakeDirection('UP')\r\n        break;\r\n      case 'ArrowDown':\r\n        updateSnakeDirection('DOWN')\r\n        break;\r\n      case 'Space':\r\n        switchPlayStop()\r\n        break;\r\n      case 'Enter':\r\n        enterPressHandler()\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },[pressEvent])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header/>\r\n      <StatusBar message={message} snakeLength={gameStatus.snakeLength} />\r\n      <Display gameSize={gameSize} entities={entities} />\r\n      <InfoBox/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './fonts/Quicksand/static/Quicksand-Regular.ttf';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}